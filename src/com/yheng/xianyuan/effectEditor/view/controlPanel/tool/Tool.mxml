<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" 
		 implements="com.codeTooth.actionscript.patterns.subject.IObserver" addedToStage="addToStageHandler(event)" currentState="light">
	<fx:Declarations>
		<!-- 将非可视元素（例如服务、值对象）放在此处 -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import com.codeTooth.actionscript.lang.exceptions.IllegalOperationException;
			import com.codeTooth.actionscript.lang.utils.Common;
			import com.codeTooth.actionscript.lang.utils.FileUtil;
			import com.codeTooth.actionscript.patterns.subject.INofityData;
			import com.yheng.xianyuan.effectEditor.command.CommandID;
			import com.yheng.xianyuan.effectEditor.command.GetEffectCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetAssistantPointVisibleCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetEffectColorFilterCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetEffectColorTransformCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetEffectEmptyFramesCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetFPSCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetNameCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetPlayingCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetReferenceObjectCommandData;
			import com.yheng.xianyuan.effectEditor.command.SetWorkspaceColorCommandData;
			import com.yheng.xianyuan.effectEditor.core.Mediator;
			import com.yheng.xianyuan.effectEditor.data.EffectData;
			import com.yheng.xianyuan.effectEditor.subject.RemoveEffectNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SelectEffectNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SetAssistantPointVisibleNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SetFPSNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SetNameNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SetWorkspaceColorNotifyData;
			import com.yheng.xianyuan.effectEditor.subject.SubjectID;
			
			import mx.controls.Alert;
			import mx.events.ColorPickerEvent;
			
			import spark.events.IndexChangeEvent;
			
			//------------------------------------------------------------------------------------------------------------------------------
			// 初始化
			//------------------------------------------------------------------------------------------------------------------------------
			
			private function addToStageHandler(event:Event):void
			{
				Mediator.subjects.followSubject(this, SubjectID.SET_WORKSPACE_COLOR);
				Mediator.subjects.followSubject(this, SubjectID.SELECT_EFFECT);
				Mediator.subjects.followSubject(this, SubjectID.UNSELECT_EFFECT);
				Mediator.subjects.followSubject(this, SubjectID.REMOVE_EFFECT);
				Mediator.subjects.followSubject(this, SubjectID.SET_ASSISTANT_POINT_VISIBLE);
				Mediator.subjects.followSubject(this, SubjectID.SET_NAME);
				Mediator.subjects.followSubject(this, SubjectID.SET_FPS);
			}
			
			//------------------------------------------------------------------------------------------------------------------------------
			// 实现 IObserver 接口
			//------------------------------------------------------------------------------------------------------------------------------
			
			public function update(data:INofityData=null):void
			{
				switch(data.getSubjectID())
				{
					case SubjectID.SET_WORKSPACE_COLOR:
					{
						setWorkspaceColor(SetWorkspaceColorNotifyData(data));
						break;
					}
						
					case SubjectID.SELECT_EFFECT:
					{
						selectEffect(SelectEffectNotifyData(data));
						break;
					}
						
					case SubjectID.UNSELECT_EFFECT:
					{
						unselectEffect();
						break;
					}
						
					case SubjectID.REMOVE_EFFECT:
					{
						removeEffect(RemoveEffectNotifyData(data));
						break;
					}
						
					case SubjectID.SET_ASSISTANT_POINT_VISIBLE:
					{
						setAssistantPointVisible(SetAssistantPointVisibleNotifyData(data));
						break;
					}
						
					case SubjectID.SET_NAME:
					{
						setName(SetNameNotifyData(data));
						break;
					}
						
					case SubjectID.SET_FPS:
					{
						setFPS(SetFPSNotifyData(data));
						break;
					}
						
					default:
					{
						throw new IllegalOperationException();
						break;
					}
				}
			}
			
			//------------------------------------------------------------------------------------------------------------------------------
			// 逻辑代码
			//------------------------------------------------------------------------------------------------------------------------------
			
			// 工作区颜色
			private function workspaceColorChangeHandler(event:ColorPickerEvent):void
			{
				Mediator.commands.executeCommand(CommandID.SET_WORKSPACE_COLOR, new SetWorkspaceColorCommandData(event.color));
			}
			
			private function setWorkspaceColor(data:SetWorkspaceColorNotifyData):void
			{
				colorPicker.selectedColor = data.color
			}
			
			// 动画播放暂停
			private function stopHandler(event:MouseEvent):void
			{
				Mediator.commands.executeCommand(CommandID.SET_PLAYING, new SetPlayingCommandData(false));
			}
			
			private function playHandler(event:MouseEvent):void
			{
				Mediator.commands.executeCommand(CommandID.SET_PLAYING, new SetPlayingCommandData(true));
			}
			
			// Effect
			private function removeEffect(data:RemoveEffectNotifyData):void
			{
				if(data.effectData.id == _selectEffectID)
				{
					_selectEffectID = -1;
				}
			}
			
			private var _selectEffectID:Number = -1;
			private function selectEffect(data:SelectEffectNotifyData):void
			{
				_selectEffectID = data.effectID;
				var effectData:EffectData = Mediator.commands.executeCommand(CommandID.GET_EFFECT, new GetEffectCommandData(data.effectID));
				
				framesInput.text = String(Mediator.clipsDataManager.getClipsData(effectData.templateID).length);
				emptyFramesPrefixInput.text = String(effectData.emptyFramesPrefix);
				emptyFramesSuffixInput.text = String(effectData.emptyFramesSuffix);
				
				v1 = effectData.v1;
				v2 = effectData.v2;
				v3 = effectData.v3;
				v4 = effectData.v4;
				
				r = 100 + effectData.cr * effectData.ca / 255;
				g = 100 + effectData.cg * effectData.ca / 255;
				b = 100 + effectData.cb * effectData.ca / 255;
				a = effectData.a * 100;
				ar = effectData.ar;
				ag = effectData.ag;
				ab = effectData.ab;
				aa = effectData.aa;
				ca = effectData.ca;
				cr = effectData.cr;
				cg = effectData.cg;
				cb = effectData.cb;
				l = effectData.l;
				lSlider.value = effectData.l;
				lNS.value = effectData.l;
			}
			private function unselectEffect():void
			{
				_selectEffectID = -1;
				emptyFramesPrefixInput.text = "0";
				emptyFramesSuffixInput.text = "0";
				framesInput.text = "0";
			}
			
			// 空帧
			private function setEmptyFramesHandler(event:MouseEvent):void
			{
				if(Mediator.commands.executeCommand(CommandID.GET_PLAYING))
				{
					Alert.show("请先暂停特效的播放，然后进行设置");
					return;
				}
				
				if(_selectEffectID == -1)
				{
					Alert.show("请在工作区选择要设定的特效");
					return;
				}
				
				Mediator.commands.executeCommand(
					CommandID.SET_EFFECT_EMPTY_FRAMES, 
					new SetEffectEmptyFramesCommandData(_selectEffectID, int(emptyFramesPrefixInput.text), int(emptyFramesSuffixInput.text))
				);
			}
			
			// 辅助点
			private function assistantPointHandler(event:Event):void
			{
				Mediator.commands.executeCommand(CommandID.SET_ASSISTANT_POINT_VISIBLE, new SetAssistantPointVisibleCommandData(assistantPointVisibleCbx.selected));
			}
			
			private function setAssistantPointVisible(data:SetAssistantPointVisibleNotifyData):void
			{
				assistantPointVisibleCbx.selected = data.visible;
			}
			
			// FPS
			private function fpsChangeHandler(event:MouseEvent):void
			{
				Mediator.commands.executeCommand(CommandID.SET_FPS, new SetFPSCommandData(fps.value));
			}
			
			private function setFPS(data:SetFPSNotifyData):void
			{
				fps.value = data.fps;
			}
			
			// 特效名字
			private function setName(data:SetNameNotifyData):void
			{
				nameInput.text = data.name;
			}
			
			private function setNameHandler(event:MouseEvent):void
			{
				Mediator.commands.executeCommand(CommandID.SET_NAME, new SetNameCommandData(nameInput.text));
			}
			
			// 参照物
			private function setReferenceObjectHandler(event:MouseEvent):void
			{
				FileUtil.createFileStatic("refObjeFile", true, selectRefObjectHandler).
					browseForOpen("选择参照物图片", [FileUtil.getFileFilterPNG(), FileUtil.getFileFileterJPG()]);
			}
			
			private function clearReferenceObjectHandler(event:MouseEvent):void
			{
				Mediator.commands.executeCommand(CommandID.CLEAR_REFERENCE_OBJECT);
			}
			
			private function selectRefObjectHandler():void
			{
				var file:File = FileUtil.getFileStatic("refObjeFile");
				var stream:FileStream = null;
				var bytes:ByteArray = null;
				try
				{
					bytes = new ByteArray();
					stream = new FileStream();
					stream.open(file, FileMode.READ);
					stream.readBytes(bytes);
				} 
				catch(error:Error) 
				{
					Alert.show(error.message, "打开文件时发生异常");
					return;
				}
				finally
				{
					if(stream != null)
					{
						stream.close();
					}
				}
				
				Mediator.commands.executeCommand(CommandID.SET_REFERENCE_OBJECT, new SetReferenceObjectCommandData(bytes));
			}
			
			// 修改颜色编辑类型
			private function colorTransformTypeChangeHandle(event:IndexChangeEvent):void
			{
				this.currentState = ddl.selectedItem.value;
			}
			
			[Bindable]
			public var v1:int = Mediator.defaultValue.v1;
			[Bindable]
			public var v2:int = Mediator.defaultValue.v2;
			[Bindable]
			public var v3:int = Mediator.defaultValue.v3;
			[Bindable]
			public var v4:int = Mediator.defaultValue.v4;
			public function refreshCurrentFilterColor():void
			{
				if(_selectEffectID == -1)
				{
					return;
				}
				
				Mediator.commands.executeCommand(CommandID.SET_EFFECT_COLOR_FILTER, new SetEffectColorFilterCommandData(
					_selectEffectID, v1, v2, v3, v4
				));
			}
			private function resetColorFilterHandler(event:MouseEvent):void
			{
				if(_selectEffectID == -1)
				{
					return;
				}
				
				v1 = Mediator.defaultValue.v1;
				v2 = Mediator.defaultValue.v2;
				v3 = Mediator.defaultValue.v3;
				v4 = Mediator.defaultValue.v4;
				
				Mediator.commands.executeCommand(CommandID.SET_EFFECT_COLOR_FILTER, new SetEffectColorFilterCommandData(
					_selectEffectID, 
					Mediator.defaultValue.v1, Mediator.defaultValue.v2, Mediator.defaultValue.v3, Mediator.defaultValue.v4
				));
			}
			
			[Bindable]
			public var a:int = Mediator.defaultValue.a_percent;
			[Bindable]
			public var r:int = Mediator.defaultValue.r_percent;
			[Bindable]
			public var g:int = Mediator.defaultValue.g_percent;
			[Bindable]
			public var b:int = Mediator.defaultValue.b_percent;
			[Bindable]
			public var aa:int = Mediator.defaultValue.aa;
			[Bindable]
			public var ar:int = Mediator.defaultValue.ar;
			[Bindable]
			public var ag:int = Mediator.defaultValue.ag;
			[Bindable]
			public var ab:int = Mediator.defaultValue.ab;
			[Bindable]
			public function get l():int
			{
				return (ar + ag + ab) / 3;
			}
			public function set l(value:int):void
			{
				ar = ag = ab = value;
			}
			[Bindable]
			public var ca:int = Mediator.defaultValue.ca;
			[Bindable]
			public var cr:int = Mediator.defaultValue.cr;
			[Bindable]
			public var cg:int = Mediator.defaultValue.cg;
			[Bindable]
			public var cb:int = Mediator.defaultValue.cb;
			public function refreshCurrentTransformColor(useColorPanelData:Boolean = false):void
			{
				if(_selectEffectID == -1)
				{
					return;
				}
				
				if (useColorPanelData)
				{
					this.r = 100 + cr *  ca / 255;
					this.g = 100 + cg *  ca / 255;
					this.b = 100 + cb *  ca / 255;
				}
				
				Mediator.commands.executeCommand(CommandID.SET_EFFECT_COLOR_TRANSFORM, new SetEffectColorTransformCommandData(
					_selectEffectID, r / 100, g / 100, b / 100, a / 100, ar, ag, ab, aa, cr, cg, cb, ca, l
				));
			}
			
			private function resetColorTransformHandler(event:MouseEvent):void
			{
				if(_selectEffectID == -1)
				{
					return;
				}
				
				r = Mediator.defaultValue.r_percent;
				g = Mediator.defaultValue.g_percent;
				b = Mediator.defaultValue.b_percent;
				a = Mediator.defaultValue.a_percent;
				ar = Mediator.defaultValue.ar;
				ag = Mediator.defaultValue.ag;
				ab = Mediator.defaultValue.ab;
				aa = Mediator.defaultValue.aa;
				ca = Mediator.defaultValue.ca;
				cr = Mediator.defaultValue.cr;
				cg = Mediator.defaultValue.cg;
				cb = Mediator.defaultValue.cb;
				l = Mediator.defaultValue.l;
				lSlider.value = Mediator.defaultValue.l;
				lNS.value = Mediator.defaultValue.l;
				
				Mediator.commands.executeCommand(CommandID.SET_EFFECT_COLOR_TRANSFORM, new SetEffectColorTransformCommandData(
					_selectEffectID, 
					Mediator.defaultValue.r, Mediator.defaultValue.g, Mediator.defaultValue.b, Mediator.defaultValue.a, 
					Mediator.defaultValue.ar, Mediator.defaultValue.ag, Mediator.defaultValue.ab, Mediator.defaultValue.aa, 
					Mediator.defaultValue.cr, Mediator.defaultValue.cg, Mediator.defaultValue.cb, Mediator.defaultValue.ca, 
					Mediator.defaultValue.l
				));
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="light"/>
		<s:State name="color"/>
		<s:State name="adv"/>
	</s:states>
	<s:HGroup verticalAlign="middle">
		<s:Label text="名称："/>
		<s:TextInput id="nameInput" width="150"/>
		<s:Button label="确定" width="45" click="setNameHandler(event)"/>
	</s:HGroup>
	<mx:HRule width="100%"/>
	<s:HGroup verticalAlign="middle">
		<s:Label text="参照物:"/>
		<s:Button width="45" label="设定" click="setReferenceObjectHandler(event)"/>
		<s:Button width="45" label="清除" click="clearReferenceObjectHandler(event)"/>
	</s:HGroup>
	<mx:HRule width="100%"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:Label text="工作区背景色："/>
		<mx:ColorPicker id="colorPicker" change="workspaceColorChangeHandler(event)"/>
	</s:HGroup>
	<s:HGroup>
		<s:Label text="辅助点可见："/>
		<s:CheckBox selected="true" id="assistantPointVisibleCbx" change="assistantPointHandler(event)"/>
	</s:HGroup>
	<mx:HRule width="100%"/>
	<s:HGroup>
		<s:Button icon="@Embed('pause.png')" width="32" height="28" click="stopHandler(event)"/>
		<s:Button icon="@Embed('play.png')" width="30" height="28" click="playHandler(event)"/>
	</s:HGroup>
	<s:HGroup verticalAlign="middle">
		<s:Label text="帧频"/>
		<s:NumericStepper id="fps" value="30" width="100" minimum="1" maximum="60"/>
		<s:Button label="确定" width="45" click="fpsChangeHandler(event)"/>
	</s:HGroup>
	<mx:HRule width="100%"/>
	<s:Scroller width="100%" height="100%" horizontalScrollPolicy="off">
		<s:VGroup>
			<s:HGroup>
				<s:VGroup horizontalAlign="center">
					<s:Label text="前插入空白帧数"/>
					<s:TextInput id="emptyFramesPrefixInput" width="90" contentBackgroundColor="#A8DAFD" text="0" textAlign="center" restrict="0-9"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Label text="动画帧数"/>			
					<s:TextInput id="framesInput" width="50" editable="false" contentBackgroundColor="0xBBBBBB" text="0" textAlign="center" selectable="false"/>
				</s:VGroup>
				<s:VGroup horizontalAlign="center">
					<s:Label text="后追加空白帧数"/>
					<s:TextInput id="emptyFramesSuffixInput" width="90" contentBackgroundColor="#A8DAFD" text="0" textAlign="center" restrict="0-9"/>
				</s:VGroup>
			</s:HGroup>
			<s:Button label="确定" width="45" click="setEmptyFramesHandler(event)"/>
			<mx:HRule width="100%"/>
			
			<s:VGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="颜色滤镜："/>
					<s:Button label="重置" click="resetColorTransformHandler(event)"/>
				</s:HGroup>
				<s:DropDownList id="ddl" width="200" selectedIndex="0" labelField="label" change="colorTransformTypeChangeHandle(event)">
					<s:dataProvider>
						<s:ArrayList>
							<fx:Object label="亮度" value="light"/>
							<fx:Object label="色调" value="color"/>
							<fx:Object label="高级" value="adv"/>
						</s:ArrayList>
					</s:dataProvider>
				</s:DropDownList>
				<s:Group includeIn="light" x="0" y="23" width="100%">
					<s:Label x="4" y="5" text="亮度:"/>
					<s:HSlider id="lSlider" x="36" y="6" width="95" value="@{l}" minimum="-255" maximum="255" change="refreshCurrentTransformColor()"/>
					<s:NumericStepper id="lNS" x="135" y="0" width="50" minimum="-255" maximum="255" value="@{l}" change="refreshCurrentTransformColor()"/>
					<s:Label x="188" y="5" text="%"/>
				</s:Group>
				<s:VGroup x="0" y="23" includeIn="color" gap="5">
					<s:Group>
						<s:Label x="4" y="5" text="色调:"/>
						<s:HSlider x="36" y="6" width="95" value="@{ca}" minimum="0" maximum="100" change="refreshCurrentTransformColor(true)"/>
						<s:NumericStepper x="135" y="0" width="50" minimum="0" maximum="100" value="@{ca}" change="refreshCurrentTransformColor(true)"/>
						<s:Label x="188" y="5" text="%"/>
					</s:Group>
					<s:Group>
						<s:Label x="4" y="5" text="红:"/>
						<s:HSlider x="36" y="6" width="95" value="@{cr}" minimum="-255" maximum="255" change="refreshCurrentTransformColor(true)"/>
						<s:NumericStepper x="135" y="0" width="50" minimum="-255" maximum="255" value="@{cr}" change="refreshCurrentTransformColor(true)"/>
					</s:Group>
					<s:Group>
						<s:Label x="4" y="5" text="绿:"/>
						<s:HSlider x="36" y="6" width="95" value="@{cg}" minimum="-255" maximum="255" change="refreshCurrentTransformColor(true)"/>
						<s:NumericStepper x="135" y="0" width="50" minimum="-255" maximum="255" value="@{cg}" change="refreshCurrentTransformColor(true)"/>
					</s:Group>
					<s:Group>
						<s:Label x="4" y="5" text="蓝:"/>
						<s:HSlider x="36" y="6" width="95" value="@{cb}" minimum="-255" maximum="255" change="refreshCurrentTransformColor(true)"/>
						<s:NumericStepper x="135" y="0" width="50" minimum="-255" maximum="255" value="@{cb}" change="refreshCurrentTransformColor(true)"/>
					</s:Group>
				</s:VGroup>
				<s:Group x="0" y="23" includeIn="adv">
					<s:Label x="0" y="7" width="45" text="Alpha:" textAlign="right"/>
					<s:NumericStepper x="50" y="2" width="50" minimum="-100" maximum="100" value="@{a}" change="refreshCurrentTransformColor()"/>
					<s:Label x="0" y="34" width="45" text="红:" textAlign="right"/>
					<s:NumericStepper x="50" y="27" width="50" minimum="-100" maximum="100" value="@{r}" change="refreshCurrentTransformColor()"/>
					<s:Label x="0" y="58" width="45" text="绿:" textAlign="right"/>
					<s:NumericStepper x="50" y="52" width="50" minimum="-100" maximum="100" value="@{g}" change="refreshCurrentTransformColor()"/>
					<s:Label x="0" y="81" width="45" text="蓝:" textAlign="right"/>
					<s:NumericStepper x="50" y="77" width="50" minimum="-100" maximum="100" value="@{b}" change="refreshCurrentTransformColor()"/>
					<s:Label x="102" y="8" width="40" text="xA +" textAlign="right"/>
					<s:NumericStepper x="150" y="1" width="50" minimum="-255" maximum="255" value="@{aa}" change="refreshCurrentTransformColor()"/>
					<s:Label x="102" y="34" width="40" text="xR +" textAlign="right"/>
					<s:NumericStepper x="150" y="26" width="50" minimum="-255" maximum="255" value="@{ar}" change="refreshCurrentTransformColor()"/>
					<s:Label x="102" y="57" width="40" text="xG +" textAlign="right"/>
					<s:NumericStepper x="150" y="51" width="50" minimum="-255" maximum="255" value="@{ag}" change="refreshCurrentTransformColor()"/>
					<s:Label x="102" y="81" width="40" text="xB +" textAlign="right"/>
					<s:NumericStepper x="150" y="76" width="50" minimum="-255" maximum="255" value="@{ab}" change="refreshCurrentTransformColor()"/>
				</s:Group>
			</s:VGroup>
			
			<mx:HRule width="100%"/>
			
			<s:VGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="颜色转换："/>
					<s:Button label="重置" click="resetColorFilterHandler(event)"/>
				</s:HGroup>
				<s:Group>
					<s:Label x="4" y="5" text="亮度:"/>
					<s:HSlider x="50" y="6" width="95" value="@{v1}" minimum="-100" maximum="100" change="refreshCurrentFilterColor()"/>
					<s:NumericStepper x="149" y="0" width="50" minimum="-100" maximum="100" value="@{v1}" change="refreshCurrentFilterColor()"/>
				</s:Group>
				<s:Group>
					<s:Label x="4" y="5" text="对比度:"/>
					<s:HSlider x="50" y="6" width="95" value="@{v2}" minimum="-100" maximum="100" change="refreshCurrentFilterColor()"/>
					<s:NumericStepper x="149" y="0" width="50" minimum="-100" maximum="100" value="@{v2}" change="refreshCurrentFilterColor()"/>
				</s:Group>
				<s:Group>
					<s:Label x="4" y="5" text="饱和度:"/>
					<s:HSlider x="50" y="6" width="95" value="@{v3}" minimum="-100" maximum="100" change="refreshCurrentFilterColor()"/>
					<s:NumericStepper x="149" y="0" width="50" minimum="-100" maximum="100" value="@{v3}" change="refreshCurrentFilterColor()"/>
				</s:Group>
				<s:Group>
					<s:Label x="4" y="5" text="色相:"/>
					<s:HSlider x="50" y="6" width="95" value="@{v4}" minimum="-180" maximum="180" change="refreshCurrentFilterColor()"/>
					<s:NumericStepper x="149" y="0" width="50" minimum="-180" maximum="180" value="@{v4}" change="refreshCurrentFilterColor()"/>
				</s:Group>
			</s:VGroup>
		</s:VGroup>
	</s:Scroller>
</s:VGroup>
